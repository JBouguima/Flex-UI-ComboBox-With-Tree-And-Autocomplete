<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="offerta.monkeywrench.components.*" layout="absolute" 
xmlns:offerta="offerta.autoCompleteComboBox.*"  minWidth="955" minHeight="600">
	<!--
	
	Todo:
	- Add ability to select node using autocomplete (use a open source component if possible). 
	- Design should look like http://www.flextras.com/Assets/ContentImages/ACCBScreen_01.gif
	- If user selects node using autocomplete (or through tree dropdown) the selecteValue should be updated and the label 
	  set to matching label. When matched to a node label is style with an undeline. If users edits label to activate autocomple
	  then underline style is removed and selectedValue is set to 0. 
	- Parents are selectable and thus only part of autocomple only if parentsSelectable=true
	 OK     
	-->

	<mx:Binding source="cboTree.selectedValue.toString()" destination="txtSelectedValue.text"/>
	<mx:Binding source="parseInt(txtSelectedValue.text)" destination="cboTree.selectedValue"/>
	<mx:Binding source="autoCompleteComboBox.selectedValue.toString()" destination="txtSelectedValue.text"/>
	
	<mx:Script>
		<![CDATA[
			import offerta.autoCompleteComboBox.AutoCompleteCollectionEvent;
			import offerta.autoCompleteComboBox.AutoCompleteComboBoxEvent;
			import offerta.dbFilter.flex.SampleVO;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			
			[Bindable]
			public var dsTest:ArrayCollection = new ArrayCollection([
				{Id: 0, DescriptionText: "-"},
				{Id: 1, DescriptionText:"Fruits", children: new ArrayCollection([
					{Id: 2, DescriptionText: "Apple"},
					{Id: 3, DescriptionText: "Orange"},
					{Id: 4, DescriptionText: "Kiwi"},
					{Id: 5, DescriptionText: "Pineapple"}
				])},
				{Id: 6, DescriptionText:"Animals", children: new ArrayCollection([
					{Id: 7, DescriptionText: "Monkey"},
					{Id: 8, DescriptionText: "Cat"},
					{Id: 9, DescriptionText: "Fish"},
					{Id: 10, DescriptionText: "Dog"}
				])}
			]);
			
			private function updateTree():void{
				txtSelectedValue.text = autoCompleteComboBox.selectedIndex.toString();
			}
			
			public function labelFunction(item:Object):String{
				var user : SampleVO = new SampleVO();
				user.DescriptionText = item['DescriptionText'];

				return user.toString() ;
			}

			protected function fieldFilter ( item:Object):Boolean{
				
				var user : SampleVO = new SampleVO();
				user.DescriptionText = item['DescriptionText'];
				
				if((user.DescriptionText.toLowerCase().search(autoCompleteComboBox.typeAheadTextValue.toLowerCase()) >= 0)){
					return true
				}
				return false;
			}

			protected function autoCompleteComboBox_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				autoCompleteComboBox.populateDataProvider();
			}
			
			protected function autoCompleteComboBox_autoCompleteDataProviderFilterBeginHandler(event:AutoCompleteCollectionEvent):void
			{
				// TODO Auto-generated method stub
				txtSelectedValue.text = autoCompleteComboBox.selectedIndex.toString();
			}
			
		]]>
	</mx:Script>

		<mx:Form label="Autocomplete" width="250">
			<components:TreeComboBox id="cboTree" labelField="DescriptionText" 
									 valueField="DescriptionText" x="100" y="100" width="100%"
									 dataProvider="{dsTest}" parentsSelectable="false"/>
			<mx:TextInput x="100" y="150" width="100%" id="txtSelectedValue"/>
			<offerta:AutoCompleteComboBox id="autoCompleteComboBox" 
					dataProvider="{dsTest}" 
					autoCompleteEnabled="true" 
					itemRenderer="offerta.itemRenderer.AutoCompleteItemRendererMod"
					width="100%"
					creationComplete="autoCompleteComboBox_creationCompleteHandler(event)"
					autoCompleteDataProviderFiltered="autoCompleteComboBox_autoCompleteDataProviderFilterBeginHandler(event)"
					autoCompleteFilterFunction="fieldFilter" labelFunction="labelFunction"
				/>						
	   </mx:Form>
		
</mx:Application>
